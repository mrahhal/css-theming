@use 'sass:color';
@use 'sass:map';
@use 'sass:meta';
@use 'sass:string';
@use 'colors';
@use 'fgs';
@use 'swatches';
@use 'themes';
@use 'module-variables';

@use 'modules/general' as module-general;
@use 'modules/inputs' as module-inputs;

// These will be used to obtain the values programmatically.
:root {
  --ct-theme-css-names: #{themes.$theme-css-names};

  @include themes.themes-loop {
    --ct-#{themes.$theme-css-name}-props-category: #{themes.$category};
    --ct-#{themes.$theme-css-name}-props-name: #{themes.$theme-name};
    --ct-#{themes.$theme-css-name}-props-css-name: #{themes.$theme-css-name};
    --ct-#{themes.$theme-css-name}-props-brightness: #{themes.$brightness};
  }
}

@include themes.themes-loop {
  .#{themes.$theme-css-name} body {
    --ct-swatch-names: #{map.get(themes.$theme, 'swatch-names')};
    --ct-fg-swatch-names: #{map.get(themes.$theme, 'fg-swatch-names')};
    --ct-color-names: #{map.get(themes.$theme, 'color-names')};
    --ct-semantic-color-names: #{map.get(themes.$theme, 'semantic-color-names')};
  }
}

@include themes.themes-apply {
  color-scheme: #{themes.$brightness};

  $bg-main: map.get(themes.$theme, 'bg-main');
  $bg-input: map.get(themes.$theme, 'bg-input');
  $swatches: map.get(themes.$theme, 'swatches');
  $fg-target: map.get(themes.$theme, 'fg-target');
  $fg-swatches: map.get(themes.$theme, 'fg-swatches');
  $bd: map.get(themes.$theme, 'bd');
  $bd-focus: map.get(themes.$theme, 'bd-focus');

  $color-names: map.get(themes.$theme, 'color-names');
  $semantic-color-names: map.get(themes.$theme, 'semantic-color-names');
  $color-names-all: map.get(themes.$theme, 'color-names-all');
  $colors-text-scale: map.get(themes.$theme, 'colors-text-scale');
  $swatch-names: map.get(themes.$theme, 'swatch-names');

  $font: map.get(themes.$theme, 'font');
  $text-color: map.get(themes.$theme, 'text-color');

  $mixture-pure: if(themes.$brightness=='light', white, black);
  $mixture-pure-reverse: if(themes.$brightness=='light', black, white);

  // Obtain fg-0 color first because we use it to mix almost all other color levels.
  $fg-0-percentage: map.get($fg-swatches, 0);
  $fg-0: color.mix($fg-target, white, $fg-0-percentage);

  @each $name in $color-names {
    $color: themes.theme-color-get(themes.$theme, $name);
    @each $swatch, $percentage in $swatches {
      $result: null;
      @if ($percentage <= 100) {
        $result: color.mix($color, $fg-0, $percentage);
      } @else {
        $result: color.mix($color, $mixture-pure-reverse, 200 - $percentage);
      }
      @include colors.set-color-variable-with-rgb(--#{$name}-#{$swatch}, $result);
    }
    $color-text: color.scale($color, $lightness: $colors-text-scale);
    @include colors.set-color-variable-with-rgb(--#{$name}-text, $color-text);
  }

  @each $name in $semantic-color-names {
    $target: themes.theme-semantic-color-get(themes.$theme, $name);
    @each $swatch in $swatch-names {
      @include colors.set-semantic-color-variable-with-rgb($name, $swatch, $target);
    }
    @include colors.set-semantic-color-variable-with-rgb($name, 'text', $target);
  }

  // Fill in raw names as having the 500 swatch.
  @each $name in $color-names-all {
    --#{$name}: var(--#{$name}-500);
    @if (colors.$compute-rgb-variables) {
      --#{$name}-rgb: var(--#{$name}-500-rgb);
    }
  }

  @each $level, $percentage in $fg-swatches {
    @include colors.set-color-variable-with-rgb(
      --fg-#{$level},
      color.mix($fg-target, white, $percentage));
  }

  @include themes.text-color-variables($text-color);

  --bg-main: #{$bg-main};
  --bg-input: #{$bg-input};

  @include themes.bg-variables(themes.$brightness);
  @include themes.bd-variables(themes.$brightness);

  --font: #{string.unquote($font)};
}

@if (module-variables.$enable-module-general) {
  @include module-general.apply();
}

@if (module-variables.$enable-module-inputs) {
  @include module-inputs.apply();
}
