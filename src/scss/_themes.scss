@use 'sass:list';
@use 'sass:map';
@use 'bds';
@use 'bgs';
@use 'colors';
@use 'swatches';
@use 'fgs';
@use 'fonts';

// $themes define the system defined themes of the app.
// The only required property on the theme is `brightness`. Everything else will fallback to default values if not specified.

// This defines a map from a theme's name to another map that customizes the theme's props.
$themes: (
  'default':
  (
    // 'colors': overrides $colors-[light|dark]
    // 'colors-text-scale': overrides $colors-text-scale-[light|dark]
    // 'semantic-colors': overrides $semantic-colors
    // 'font': overrides $font
    // 'text-color': overrides $text-color-[light|dark]
    // 'bg-main': overrides $bg-main-[light|dark]
    // 'bg-input': overrides $bg-input-[light|dark]
    // 'swatches': overrides $swatches
    // 'fg-target': overrides $fg-target-[light|dark]
    // 'fg-swatches': overrides $fg-swatches-[light|dark]
    // 'bg': overrides $bg-[light|dark]
    // 'bg-focus': overrides $bg-focus-[light|dark]
    // 'bd': overrides $bd-[light|dark]
    // 'bd-focus': overrides $bd-focus-[light|dark]
    'brightness': 'light',
  ),
  'default-dark':
  (
    'brightness': 'dark',
  ),
) !default;

$themes-categories: (
  '': $themes,
) !default;

$themes-categories-applied-at: (
  '': '',
) !default;

@mixin themes-category-register($category, $themes, $applied-at) {
  @each $theme-name, $theme in $themes {
    $theme: theme-normalize($category, $theme-name, $theme);
    $themes: map.merge($themes, ($theme-name: $theme));
  }

  $themes-categories: map.merge($themes-categories, ($category: $themes)) !global;
  $themes-categories-applied-at: map.merge($themes-categories-applied-at, ($category: $applied-at)) !global;

  @include compute-theme-css-names();
}

@function theme-category-css-prefix($category) {
  @return if($category=='','',#{$category}-);
}

@function theme-css-name($category, $theme-name) {
  @return theme-#{theme-category-css-prefix($category)}#{$theme-name};
}

@function combine-with-default-map($map, $default-map) {
  @if ($map==null) { $map: (); }

  @if (map.get($map, '$replace')) {
    @return map.remove($map, '$replace');
  }

  @return map.merge($default-map, $map);
}

// Normalize theme data, fill in defaults, and add computed values.
@function theme-normalize($category, $theme-name, $theme) {
  $theme: map.merge($theme, ('name': $theme-name, 'css-name': theme-css-name($category, $theme-name)));

  $brightness: map.get($theme, 'brightness');

  // colors
  $colors-default: if($brightness=='light', colors.$colors-light, colors.$colors-dark);
  $colors: combine-with-default-map(map.get($theme, 'colors'), $colors-default);
  $theme: map.merge($theme, ('colors': $colors));

  // colors-text-scale
  $colors-text-scale: if($brightness=='light', colors.$colors-text-scale-light, colors.$colors-text-scale-dark);
  @if (map.get($theme, 'colors-text-scale')==null) {
    $theme: map.merge($theme, ('colors-text-scale': $colors-text-scale));
  }

  // semantic-colors
  $semantic-colors-default: colors.$semantic-colors;
  $semantic-colors: combine-with-default-map(map.get($theme, 'semantic-colors'), $semantic-colors-default);
  $theme: map.merge($theme, ('semantic-colors': $semantic-colors));

  // font
  @if (map.get($theme, 'font')==null) { $theme: map.merge($theme, (font: fonts.$font)); }

  // text-color
  $text-color: if($brightness=='light', colors.$text-color-light, colors.$text-color-dark);
  @if (map.get($theme, 'text-color')==null) {
    $theme: map.merge($theme, ('text-color': $text-color));
  }

  // bg-main
  $bg-main: if($brightness=='light', bgs.$bg-main-light, bgs.$bg-main-dark);
  @if (map.get($theme, 'bg-main')==null) {
    $theme: map.merge($theme, ('bg-main': $bg-main));
  }

  // bg-input
  $bg-input: if($brightness=='light', bgs.$bg-input-light, bgs.$bg-input-dark);
  @if (map.get($theme, 'bg-input')==null) {
    $theme: map.merge($theme, ('bg-input': $bg-input));
  }

  // fg-target
  $fg-target: if($brightness=='light', fgs.$fg-target-light, fgs.$fg-target-dark);
  @if (map.get($theme, 'fg-target')==null) {
    $theme: map.merge($theme, ('fg-target': $fg-target));
  }

  // swatches
  @if (map.get($theme, 'swatches')==null) {
    $theme: map.merge($theme, ('swatches': swatches.$swatches));
  }

  // fg-swatches
  @if (map.get($theme, 'fg-swatches')==null) {
    $theme: map.merge($theme, ('fg-swatches': if($brightness=='light', fgs.$fg-swatches-light, fgs.$fg-swatches-dark)));
  }

  // bg
  @if (map.get($theme, 'bg')==null) {
    $theme: map.merge($theme, ('bg': if($brightness=='light', bgs.$bg-light, bgs.$bg-dark)));
  }
  @if (map.get($theme, 'bg-focus')==null) {
    $theme: map.merge($theme, ('bg-focus': if($brightness=='light', bgs.$bg-focus-light, bgs.$bg-focus-dark)));
  }

  // bd
  @if (map.get($theme, 'bd')==null) {
    $theme: map.merge($theme, ('bd': if($brightness=='light', bds.$bd-light, bds.$bd-dark)));
  }
  @if (map.get($theme, 'bd-focus')==null) {
    $theme: map.merge($theme, ('bd-focus': if($brightness=='light', bds.$bd-focus-light, bds.$bd-focus-dark)));
  }

  // names

  $color-names: map.keys($colors);
  $semantic-color-names: map.keys($semantic-colors);
  // Contains both color and semantic color names
  $color-names-all: list.join($color-names, $semantic-color-names);

  $swatch-names: map.keys(map.get($theme, 'swatches'));

  $fg-swatch-names: map.keys(map.get($theme, 'fg-swatches'));

  $theme: map.merge(
    $theme,
    (
      'color-names': $color-names,
      'semantic-color-names': $semantic-color-names,
      'color-names-all': $color-names-all,
      'swatch-names': $swatch-names,
      'fg-swatch-names': $fg-swatch-names,
    )
  );

  @return $theme;
}

@function theme-color-get($theme, $color) {
  $colors: map.get($theme, 'colors');
  @return map.get($colors, $color);
}

@function theme-semantic-color-get($theme, $color) {
  $semantic-colors: map.get($theme, 'semantic-colors');
  @return map.get($semantic-colors, $color);
}

@function theme-semantic-color-resolved-get($theme, $color) {
  $target: theme-semantic-color-get($theme, $color);
  @return theme-color-get($theme, $target);
}

@mixin bg-variables($brightness) {
  $bg: if($brightness=='light', bgs.$bg-light, bgs.$bg-dark);
  $bg-focus: if($brightness=='light', bgs.$bg-focus-light, bgs.$bg-focus-dark);

  --bg: #{$bg};
  --bg-focus: #{$bg-focus};
}

@mixin bd-variables($brightness) {
  $bd: if($brightness=='light', bds.$bd-light, bds.$bd-dark);
  $bd-focus: if($brightness=='light', bds.$bd-focus-light, bds.$bd-focus-dark);

  --bd: #{$bd};
  --bd-focus: #{$bd-focus};
}

@mixin text-color-variables($text-color) {
  --text-color-rgb: #{$text-color};
  --text-color: rgb(var(--text-color-rgb));
  --text-color-secondary: rgba(var(--text-color-rgb), .7);
}

@mixin themes-loop() {
  @each $category, $themes in $themes-categories {
    @each $theme-name, $theme in $themes {
      $category: $category !global;
      $theme-name: $theme-name !global;
      $theme-css-name: map.get($theme, 'css-name') !global;
      $theme: $theme !global;
      $brightness: map.get($theme, 'brightness') !global;
      @content;
      $category: null !global;
      $theme-name: null !global;
      $theme-css-name: null !global;
      $theme: null !global;
      $brightness: null !global;
    }
  }
}

@mixin themes-apply() {
  @include themes-loop {
    $applied-at: map.get($themes-categories-applied-at, $category);
    @if (& != null) {
      .#{$theme-css-name} #{$applied-at} &,
      .ct-theme-preview.#{$theme-css-name} & {
        @content;
      }
    } @else {
      .#{$theme-css-name} #{$applied-at},
      .ct-theme-preview.#{$theme-css-name} {
        @content;
      }
    }
  }
}

@each $category, $themes in $themes-categories {
  @each $theme-name, $theme in $themes {
    $themes: map.merge($themes, ($theme-name: theme-normalize($category, $theme-name, $theme)));
  }
  $themes-categories: map.merge($themes-categories, ($category: $themes));
}

$theme-css-names: () !default;

@mixin compute-theme-css-names() {
  $theme-css-names: () !global;

  @each $category, $themes in $themes-categories {
    @each $theme-name, $theme in $themes {
      $theme-css-name: map.get($theme, 'css-name');
      $theme-css-names: list.append($theme-css-names, $theme-css-name, comma) !global;
    }
  }
}

@include compute-theme-css-names();
